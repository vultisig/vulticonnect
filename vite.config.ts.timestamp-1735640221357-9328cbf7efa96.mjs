// vite.config.ts
import { defineConfig as defineConfig5, mergeConfig } from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite/dist/node/index.js";

// vite.config.app.ts
import { defineConfig } from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite/dist/node/index.js";
import path from "path";

// package.json
var manifest = {
  accounts: "accounts.html",
  background: "src/background/index.ts",
  content: "src/content/index.ts",
  import: "import.html",
  popup: "popup.html",
  relay: "src/relay/index.ts",
  transaction: "transaction.html",
  vaults: "vaults.html"
};

// vite.config.app.ts
var __vite_injected_original_dirname = "D:\\Meysam Aghajani\\Vultisig\\vulticonnect-solana\\vulticonnect";
var vite_config_app_default = defineConfig({
  build: {
    emptyOutDir: true,
    manifest: true,
    rollupOptions: {
      input: {
        accounts: path.resolve(__vite_injected_original_dirname, manifest.accounts),
        background: path.resolve(__vite_injected_original_dirname, manifest.background),
        import: path.resolve(__vite_injected_original_dirname, manifest.import),
        popup: path.resolve(__vite_injected_original_dirname, manifest.popup),
        transaction: path.resolve(__vite_injected_original_dirname, manifest.transaction),
        vaults: path.resolve(__vite_injected_original_dirname, manifest.vaults)
      }
    }
  }
});

// vite.config.base.ts
import { defineConfig as defineConfig2 } from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite/dist/node/index.js";
import { nodePolyfills } from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite-plugin-node-polyfills/dist/index.js";
import path2 from "path";
import react from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/@vitejs/plugin-react/dist/index.mjs";
import tsconfigPaths from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite-tsconfig-paths/dist/index.js";
var __vite_injected_original_dirname2 = "D:\\Meysam Aghajani\\Vultisig\\vulticonnect-solana\\vulticonnect";
var vite_config_base_default = defineConfig2({
  plugins: [react(), tsconfigPaths(), nodePolyfills({ exclude: ["fs"] })],
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@use "~variables" as *;`,
        api: "modern-compiler"
      }
    }
  },
  resolve: {
    alias: {
      "~variables": path2.resolve(__vite_injected_original_dirname2, "src/styles/_variables")
    }
  },
  server: { port: 3e3 }
});

// vite.config.content.ts
import { defineConfig as defineConfig3 } from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite/dist/node/index.js";
import path3 from "path";
var __vite_injected_original_dirname3 = "D:\\Meysam Aghajani\\Vultisig\\vulticonnect-solana\\vulticonnect";
var vite_config_content_default = defineConfig3({
  build: {
    emptyOutDir: true,
    manifest: true,
    outDir: "dist/content",
    assetsDir: "",
    copyPublicDir: false,
    rollupOptions: {
      input: {
        index: path3.resolve(__vite_injected_original_dirname3, manifest.content)
      }
    }
  }
});

// vite.config.relay.ts
import { defineConfig as defineConfig4 } from "file:///D:/Meysam%20Aghajani/Vultisig/vulticonnect-solana/vulticonnect/node_modules/vite/dist/node/index.js";
import path4 from "path";
var __vite_injected_original_dirname4 = "D:\\Meysam Aghajani\\Vultisig\\vulticonnect-solana\\vulticonnect";
var vite_config_relay_default = defineConfig4({
  build: {
    emptyOutDir: true,
    manifest: true,
    outDir: "dist/relay",
    assetsDir: "",
    copyPublicDir: false,
    rollupOptions: {
      input: {
        index: path4.resolve(__vite_injected_original_dirname4, manifest.relay)
      }
    }
  }
});

// vite.config.ts
var vite_config_default = defineConfig5(() => {
  const chunk = process.env.CHUNK;
  switch (chunk) {
    case "content":
      return mergeConfig(vite_config_base_default, vite_config_content_default);
    case "relay":
      return mergeConfig(vite_config_base_default, vite_config_relay_default);
    default:
      return mergeConfig(vite_config_base_default, vite_config_app_default);
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
